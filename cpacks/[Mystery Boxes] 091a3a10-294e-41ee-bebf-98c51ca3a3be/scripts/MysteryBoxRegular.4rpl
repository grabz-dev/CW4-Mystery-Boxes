# --MysteryBoxRegular-- 8/16/2021 8:45:40 PM

#Used in RNGManager
$RNG_Manager_Type:"REGULAR_MYSTERY_BOX"
$StaggerFrames:0
$$Explosion_Scale:0.6

##############
# State engine
<-G_sState "CONSTRUCTING" eq if
	Self GetUnitConstructing not if
		<-StaggerFrames gt0 if
			"STAGGERED" @SetState
		else
			"SHRINKING" @SetState
		endif
	endif
else <-G_sState "STAGGERED" eq if
	Self "script_root" 1.0 <-StaggerFrames 0.02 mul sub 0.1 max dup dup V3 SetObjScale
	<-StaggerFrames 1 sub ->StaggerFrames
	<-StaggerFrames 0 lte if
		"SHRINKING" @SetState
	endif
else <-G_sState "SHRINKING" eq if
	<-fCurrentScale 0.95 mul <-fShrinkToScale max ->fCurrentScale
	Self "script_root" <-fCurrentScale dup dup V3 SetObjScale
	<-fCurrentScale <-fShrinkToScale lte if
		"EXPANDING" @SetState
	endif
else <-G_sState "EXPANDING" eq if
	@AnimateExpanding if
		"OPENING" @SetState
	endif
else <-G_sState "OPENING" eq if
	@AnimateExpanding pop
	@AnimateOpening if
		"DECAYING" @SetState
	endif
else <-G_sState "DECAYING" eq if
	<-iDecayFrames 1 sub ->iDecayFrames

	Self "script_root" <-iDecayFrames <-iDecayFramesTotal asfloat div dup dup V3 SetObjScale
	
	<-iDecayFrames 3 eq if
		"explosion5" Self GetUnitPosition V3(<-Explosion_Scale dup dup) CreateEffect
	endif
	<-iDecayFrames 0 lte if
		"FINISHED" @SetState
	endif
endif endif endif endif endif endif



:awake
	once
		"MB_SetBoxStateFromMsg" "OnSetBoxStateFromMsg" RegisterForMsg
		"CONSTRUCTING" @SetState
		
		<-StaggerFrames gt0 if
			Self "script_root" 1.0 <-StaggerFrames 0.02 mul sub 0.1 max dup dup V3 SetObjScale
		endif
	endonce
:once
	@awake

# s1 -
# Description: Set the state of this unit. This determines its current behavior and prepares it.
# Arguments: The new state.
# Result: 
:SetState
	->SST_sNewState
	
	<-SST_sNewState "STAGGERED" eq if
		
	else <-SST_sNewState "SHRINKING" eq if
		0.75 ->fShrinkToScale
		1.0 ->fCurrentScale
	else <-SST_sNewState "EXPANDING" eq if
		0.03 ->fExpandToScaleAnim #The lower this is set, the longer it will take for the box to reach 1.0 scale. Always set above 0.
		1.0 ->fExpandToScale #Max scale to expand to.
		0.10 ->fExpandScaleDiffUntilOpening #fExpandToScale minus this value is the scale needed to be reached to move on to opening (which will continue to expand to max).
	else <-SST_sNewState "OPENING" eq if
		Self FALSE SetUnitSelected
		Self FALSE SetUnitSelectable
	
		ClearStack
		"face_left" "face_right" "face_front" "face_back" "face_top" "face_bottom" List ->lsAnimTypes
		"face_left" 0 "face_right" 0 "face_front" 0 "face_back" 0 "face_top" 0 "face_bottom" 0 Table ->tsAnimRotations
		"face_left" 4 "face_right" 8 "face_front" 16 "face_back" 16 "face_top" 0 "face_bottom" 0 Table ->tsAnimDelay
		"face_left" FALSE "face_right" FALSE "face_front" FALSE "face_back" FALSE "face_top" FALSE "face_bottom" FALSE Table ->tsAnimFinished
		80.0 ->fAnimFaceMaxRotation
		
		#Tell RNGManager to spawn a unit here.
		ClearStack "MB_MysteryBoxOpened" "sType" <-RNG_Manager_Type "v3fPos" Self GetUnitPosition "iSelf" Self 3 TableN SendMsg

	else <-SST_sNewState "DECAYING" eq if
		Self FALSE SetUnitOccupiesLand
		30 ->iDecayFramesTotal
		<-iDecayFramesTotal ->iDecayFrames
	else <-SST_sNewState "FINISHED" eq if
		Self TRUE TRUE TRUE DestroyUnit
	endif endif endif endif endif endif
	
	<-SST_sNewState ->G_sState

# - b1
# Description: Animation of the expanding state of the box.
# Arguments: 
# Result: TRUE if the state should move on to OPENING, FALSE otherwise.
:AnimateExpanding
	#Calculate current expansion speed (ease-out).
	<-fExpandToScaleAnim <-fExpandToScale add <-fCurrentScale sub 10.0 div 1 add ->fExpandFactor
	
	<-fCurrentScale <-fExpandFactor mul <-fExpandToScale min ->fCurrentScale
	Self "script_root" <-fCurrentScale dup dup V3 SetObjScale
	<-fCurrentScale <-fExpandToScale <-fExpandScaleDiffUntilOpening sub gte if
		TRUE return
	endif
	FALSE return

# - b1
# Description: Animation routine of the box. Setting state "OPENING" resets the animation, and this should be called until it is finished.
# Arguments:
# Result: TRUE if the animation is complete, FALSE otherwise.
:AnimateOpening
	TRUE ->ANM_bAllDone
	
	#Animate all of the box faces.
	<-lsAnimTypes 0 do
		<-lsAnimTypes[I] ->ANM_sType

		<-tsAnimFinished{<-ANM_sType} not if
			<-ANM_sType @AnimateOpeningType
			FALSE ->ANM_bAllDone
		endif
	loop
	
	<-ANM_bAllDone if
		TRUE return
	endif
	FALSE return

# s1 - 
# Description: Used to animate each separate face of the box from the Animate function.
# Arguments: The name of the obj face to animate.
# Result: 
:AnimateOpeningType
	->ATP_sType
	
	#Bottom face is not animated.
	<-ATP_sType "face_bottom" eq if
		TRUE ->tsAnimFinished{<-ATP_sType}
		return
	endif
	
	#Top face is set to disappear instantly.
	<-ATP_sType "face_top" eq if
		Self <-ATP_sType FALSE SetObjActive
		TRUE ->tsAnimFinished{<-ATP_sType}
		return
	endif
	
	#Other faces use opening animation.
	
	#First we wait for the AnimDelay clock to run out.
	<-tsAnimDelay{<-ATP_sType} 1 sub 0 max ->tsAnimDelay{<-ATP_sType}
	<-tsAnimDelay{<-ATP_sType} 0 gt if
		return
	endif
	
	#Now we open each side of the box by rotating it 90 degrees.
	<-tsAnimRotations{<-ATP_sType} 1 add 1.3 mul <-fAnimFaceMaxRotation min ->tsAnimRotations{<-ATP_sType}
	Self <-ATP_sType FALSE GetObjRotation ->v3fRot
	Self <-ATP_sType <-tsAnimRotations{<-ATP_sType} neg <-v3fRot.y <-v3fRot.z V3 FALSE SetObjRotation
	
	#If the obj finished its rotation we are done.
	<-tsAnimRotations{<-ATP_sType} <-fAnimFaceMaxRotation gte if
		TRUE ->tsAnimFinished{<-ATP_sType}
		return
	endif
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	